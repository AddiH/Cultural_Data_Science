# load pacakges
pacman::p_load("sf", "tidyverse", "leaflet", "mapboxapi")
# load data
df <- read_csv2("data/in/kommune_grænse.csv")
# load data
df <- read_csv2("../data/in/kommune_grænse.csv")
# Turn column into sf object
geometry <- st_as_sfc(df$shape_wkt)
# Set the current crs
st_crs(geometry) <- 25832
# Transform to leaflet/mapbox crs
geometry <- st_transform(geometry, crs = 4326)
# make a new df to save data
save <- tibble(desc = "kommunegrænse")
save$geometry <- geometry
# write the file
st_write(save, "data/in/kommune_border.shp")
# make a new df to save data
save <- tibble(desc = "kommunegrænse")
save$geometry <- geometry
# write the file
st_write(save, "../data/in/kommune_border.shp")
# delete surplus files so the data folder is simpler
file.remove("../data/in/kommune_border.dbf")
file.remove("../data/in/kommune_border.prj")
file.remove("../data/in/kommune_border.shx")
# load data
df <- read_csv2("../data/in/kommune_grænse.csv")
# Turn column into sf object
geometry <- st_as_sfc(df$shape_wkt)
# Set the current crs
st_crs(geometry) <- 25832
# Transform to leaflet/mapbox crs
geometry <- st_transform(geometry, crs = 4326)
# make a new df to save data
save <- tibble(desc = "kommunegrænse")
save$geometry <- geometry
# write the file
st_write(save, "../data/multipolygons/kommune_border.shp")
# delete surplus files so the data folder is simpler
file.remove("../data/multipolygons/kommune_border.dbf")
file.remove("../data/multipolygons/kommune_border.prj")
file.remove("../data/multipolygons/kommune_border.shx")
# check that it plots correctly
load <- read_sf("../data/multipolygons/kommune_border.shp")
# make a new df to save data
save <- tibble(desc = "kommunegrænse")
save$geometry <- geometry
# write the file
st_write(save, "../data/multipolygons/kommune_border.shp")
# delete surplus files so the data folder is simpler
#file.remove("../data/multipolygons/kommune_border.dbf")
#file.remove("../data/multipolygons/kommune_border.prj")
#file.remove("../data/multipolygons/kommune_border.shx")
# check that it plots correctly
load <- read_sf("../data/multipolygons/kommune_border.shp")
# Plot map
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11", username = "mapbox") %>%
addPolygons(
data = load$geometry,
color = "blue",
fillColor = "blue",
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
# make a new df to save data
save <- tibble(desc = "kommunegrænse")
save$geometry <- geometry
# write the file
st_write(save, "../data/multipolygons/municipality_border/kommune_border.shp")
# check that it plots correctly
load <- read_sf("../data/multipolygons/municipality_border/kommune_border.shp")
# Plot map
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11", username = "mapbox") %>%
addPolygons(
data = load$geometry,
color = "blue",
fillColor = "blue",
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
View(geometry)
# loas pacakges
pacman::p_load("sf", "tidyverse")
# load data
df <- read_csv2("data/in/byzoner.csv")
# load data
df <- read_csv2("../data/in/byzoner.csv")
# drop sommerhus-zoner
df <- df %>%
filter(zone == 1)
# ensure only correct data is in the df. There should only be one unique value in each collumn
unique(df$komnr)
unique(df$objektkode)
unique(df$zone)
# Get the oldest and newest datapoint to report range
min(df$datoopdt)
max(df$datoopdt)
# Turn column into sf object
geometry <- st_as_sfc(df$shape_wkt)
# Set the current crs
st_crs(geometry) <- 25832
# Transform to leaflet/mapbox crs
geometry <- st_transform(geometry, crs = 4326)
# Turn column into sf object
geometry <- st_as_sfc(df$shape_wkt)
# Set the current crs
st_crs(geometry) <- 25832
# Transform to leaflet/mapbox crs
geometry <- st_transform(geometry, crs = 4326)
# Turn column into sf object
geometry <- st_as_sfc(df$shape_wkt)
# Set the current crs
st_crs(geometry) <- 25832
# Transform to leaflet/mapbox crs
geometry <- st_transform(geometry, crs = 4326)
# make a new df to save data
save <- tibble(planid = df$planid)
save$geometry <- geometry
# write the file
st_write(save, "data/multipolygons/city_zone/byzone_aarhus.shp")
# make a new df to save data
save <- tibble(planid = df$planid)
save$geometry <- geometry
# write the file
st_write(save, "data/multipolygons/city_zone/byzone_aarhus.shp")
# loas pacakges
pacman::p_load("sf", "tidyverse")
# load data
df <- read_csv2("../data/in/byzoner.csv")
# drop sommerhus-zoner
df <- df %>%
filter(zone == 1)
# ensure only correct data is in the df. There should only be one unique value in each collumn
unique(df$komnr)
unique(df$objektkode)
unique(df$zone)
# Get the oldest and newest datapoint to report range
min(df$datoopdt)
max(df$datoopdt)
# Turn column into sf object
geometry <- st_as_sfc(df$shape_wkt)
# Set the current crs
st_crs(geometry) <- 25832
# Transform to leaflet/mapbox crs
geometry <- st_transform(geometry, crs = 4326)
# make a new df to save data
save <- tibble(planid = df$planid)
save$geometry <- geometry
# write the file
st_write(save, "data/multipolygons/city_zone/byzone_aarhus.shp")
View(geometry)
# make a new df to save data
save <- tibble(planid = df$planid)
save$geometry <- geometry
# write the file
st_write(save, "data/multipolygons/city_zone/byzone_aarhus.shp")
View(save)
# Plot map
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11", username = "mapbox") %>%
addPolygons(
data = save$geometry,
color = "blue",
fillColor = "blue",
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
# loas pacakges
pacman::p_load("sf", "tidyverse", "leaflet")
# loas pacakges
pacman::p_load("sf", "tidyverse", "leaflet", "mapboxapi")
# Plot map
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11", username = "mapbox") %>%
addPolygons(
data = save$geometry,
color = "blue",
fillColor = "blue",
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
# write the file
st_write(save, "../data/multipolygons/city_zone/byzone_aarhus.shp")
# check that it plots correctly
load <- read_sf("data/in/byzone_aarhus.shp")
# check that it plots correctly
load <- read_sf("../data/multipolygons/city_zone/byzone_aarhus.shp")
# Plot map
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11", username = "mapbox") %>%
addPolygons(
data = load$geometry,
color = "blue",
fillColor = "blue",
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
# Loading packages
pacman::p_load("tidyverse", "opencage", "sf", "mapboxapi")
# loading data
daycare <- read_csv2("../data/in/Anvisningsenheder.csv")
# filtering
daycare <- daycare %>%
filter(instType3 == 6011 | instType3 == 6012 | instType3 == 6014) %>% #institutions accepting 3-5 yr childre
filter(kommuneKode == 751) # Aarhus municipality
# Check whether daycares are duplicated
any(duplicated(daycare$anvisningsenhedsNavn))
# Function to convert latitude and longitude strings to proper format
convert_coordinates <- function(coord) {
# If it starts with "56", add a dot after the second digit
if (str_sub(coord, 1, 2) == "56") {
coord <- paste0(str_sub(coord, 1, 2), ".", str_sub(coord, 3, str_length(coord)))
}
# If it starts with "9" add a dot after the first
else if (str_sub(coord, 1, 1) == "9") {
coord <- paste0(str_sub(coord, 1, 1), ".", str_sub(coord, 2, str_length(coord)))
}
# If it starts with "10", add a dot after the second digit
else if (str_sub(coord, 1, 2) == "10") {
coord <- paste0(str_sub(coord, 1, 2), ".", str_sub(coord, 3, str_length(coord)))
}
# If not starting with "56", "9", or "10"
else {
print(paste0("Error:", coord))
}
return(coord)
}
# Apply the function to the latitude and longitude columns
daycare$geoBredde <- sapply(daycare$geoBredde, convert_coordinates)
daycare$geoLaengde <- sapply(daycare$geoLaengde, convert_coordinates)
# transform to numeric
daycare$geoBredde <- as.numeric(daycare$geoBredde)
daycare$geoLaengde <- as.numeric(daycare$geoLaengde)
# save the results
daycare %>%
select(anvisningsenhedsNavn, geoBredde, geoLaengde) %>%
write_csv("../data/in/coords_daycare.csv")
# removing the variable to ensure we're working with the file
rm(daycare)
kommune <- read_sf("../data/in/municipality_border/kommune_border.shp") # border of aarhus municipality
kommune <- read_sf("../data/multipolygons/municipality_border/kommune_border.shp") # border of aarhus municipality
daycare <- read_csv("../data/in/coords_daycare.csv") # coordinates of daycares
# visualise for sanity check
leaflet() %>%
addTiles() %>%
addMarkers(daycare$geoLaengde, daycare$geoBredde, popup = daycare$anvisningsenhedsNavn) %>%
addPolygons(data = kommune, color = "black", weight = 2, fill = FALSE)
# Loading packages
pacman::p_load("tidyverse", "opencage", "sf", "mapboxapi", "leaflet")
kommune <- read_sf("../data/multipolygons/municipality_border/kommune_border.shp") # border of aarhus municipality
daycare <- read_csv("../data/in/coords_daycare.csv") # coordinates of daycares
# visualise for sanity check
leaflet() %>%
addTiles() %>%
addMarkers(daycare$geoLaengde, daycare$geoBredde, popup = daycare$anvisningsenhedsNavn) %>%
addPolygons(data = kommune, color = "black", weight = 2, fill = FALSE)
# turn into sf object
day_sf <- st_as_sf(daycare, coords = c("geoLaengde", "geoBredde"), crs = 4326)
# take a look
daycare_isos <- read_sf("../data/in/isochrones/day_isos.shp")
# take a look
daycare_isos <- read_sf("../data/isochrones/day_isos.shp")
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11",
username = "mapbox") %>%
addPolygons(data = walking_isos,
color = c("blue"),
fillColor = c("blue"),
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
# take a look
day_isos <- read_sf("../data/isochrones/day_isos.shp")
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11",
username = "mapbox") %>%
addPolygons(data = day_isos,
color = c("blue"),
fillColor = c("blue"),
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
# union the isochrones to one multipolygon
multipolygon <- st_union(daycare_isos$geometry)
# save result
write_sf(multipolygon, "../data/multipolygons/daycare.shp")
# see the result
multipolygon <- read_sf("../data/multipolygons/daycare.shp")
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11",
username = "mapbox") %>%
addPolygons(data = multipolygon,
color = c("blue"),
fillColor = c("blue"),
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
pacman::p_load("tidyverse", "opencage")
Sys.setenv(OPENCAGE_KEY = "90111a11c10f47948b6f474e586599a2")
# read the data
df <- read_csv2("../data/in/Behandlingsstedsregister.csv")
# choose only aarhus municipality and general practitioners
df <- df %>%
filter(`Besøgsadresse kommune` == "Aarhus") %>% # aarhus municipality
filter(Enhedstype == "Almen lægepraksis") %>% # general practicioners
drop_na(Besøgsadresse) # drop doctors without addresses
# check whether besøgsadresse and aktivitetsadresse are identical
identical(df$Besøgsadresse, df$Aktivitetsadresse)
# keep only columns with relevant info
df <- tibble(cvr = df$`CVR-nummer`,
address = df$Besøgsadresse)
# remove information on which floor the doctor is located to get better geocoding
df <- df %>%
mutate(clean_address = str_replace_all(address, ",[^,]+,", ","))
# get coordinates
geocode <- oc_forward_df(data = df, placename = clean_address, countrycode = "DK", language = "da")
# find the succes and failed geocodes
geo_success <- geocode %>%
drop_na(oc_lat)
geo_fail <- geocode %>%
filter(is.na(oc_lat))
View(geo_fail)
View(geo_success)
View(geo_success)
# one fail, have to look it up
geo_success$oc_formatted[74]
geo_success$oc_lat[74] <- 56.1465327
geo_success$oc_lng[74] <- 10.2050873
any(duplicated(geo_success$cvr))
geo_success %>%
select(cvr, oc_lat, oc_lng) %>%
write_csv("../data/in/doc_coords.csv")
kommune <- read_sf("../data/multipolygons/municipality_border/kommune_border.shp")
pacman::p_load("tidyverse", "opencage", "sf")
Sys.setenv(OPENCAGE_KEY = "90111a11c10f47948b6f474e586599a2")
kommune <- read_sf("../data/multipolygons/municipality_border/kommune_border.shp")
doc <- read_csv("../data/in/doc_coords.csv")
# Look at the map
leaflet() %>%
addTiles() %>%
addMarkers(doc$oc_lng, doc$oc_lat, popup = as.character(doc$cvr)) %>%
addPolygons(data = kommune, color = "black", weight = 2, fill = FALSE)
pacman::p_load("tidyverse", "opencage", "sf", "leaflet")
kommune <- read_sf("../data/multipolygons/municipality_border/kommune_border.shp")
doc <- read_csv("../data/in/doc_coords.csv")
# Look at the map
leaflet() %>%
addTiles() %>%
addMarkers(doc$oc_lng, doc$oc_lat, popup = as.character(doc$cvr)) %>%
addPolygons(data = kommune, color = "black", weight = 2, fill = FALSE)
#turn into sf object
doc_sf <- st_as_sf(doc, coords = c("oc_lng", "oc_lat"), crs = 4326)
# save the file an delete surplus files
write_sf(walking_isos, "../data/isochrones/doc_isos.shp")
doc <- read_sf("../data/isochrones/doc_isos.shp")
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11",
username = "mapbox") %>%
addPolygons(data = doc,
color = c("blue"),
fillColor = c("blue"),
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
pacman::p_load("tidyverse", "opencage", "sf", "leaflet", "mapboxapi")
doc <- read_sf("../data/isochrones/doc_isos.shp")
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11",
username = "mapbox") %>%
addPolygons(data = doc,
color = c("blue"),
fillColor = c("blue"),
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
multipolygon <- st_union(docs$geometry)
multipolygon <- st_union(doc$geometry)
write_sf(multipolygon, "../data/multipolygons/doctors.shp")
polygons <- read_sf("../data/multipolygons/doctors.shp")
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11",
username = "mapbox") %>%
addPolygons(data = polygons,
color = c("blue"),
fillColor = c("blue"),
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
multipolygon <- st_union(doc$geometry)
write_sf(multipolygon, "../data/multipolygons/doctors/doctors.shp")
polygons <- read_sf("../data/multipolygons/doctors/doctors.shp")
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11",
username = "mapbox") %>%
addPolygons(data = polygons,
color = c("blue"),
fillColor = c("blue"),
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
# take a look
day_isos <- read_sf("../data/isochrones/day_isos.shp")
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11",
username = "mapbox") %>%
addPolygons(data = day_isos,
color = c("blue"),
fillColor = c("blue"),
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
# union the isochrones to one multipolygon
multipolygon <- st_union(daycare_isos$geometry)
# union the isochrones to one multipolygon
multipolygon <- st_union(day_isos$geometry)
# save result
write_sf(multipolygon, "../data/multipolygons/daycares/daycare.shp")
# see the result
multipolygon <- read_sf("../data/multipolygons/daycares/daycare.shp")
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11",
username = "mapbox") %>%
addPolygons(data = multipolygon,
color = c("blue"),
fillColor = c("blue"),
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
pacman::p_load("tidyverse", "sf", "leaflet", "mapboxapi")
df <- read_csv2("data/in/supermarkets.csv")
df <- read_csv2("../data/in/supermarkets.csv")
find_lat <- function(string){
lat <- str_match(string, "!8m2!3d(.*?)!4d")[2]
return(as.numeric(lat))
}
find_lng <- function(string){
lng <- str_match(string, "!4d(.*?)!")[2]
return(as.numeric(lng))
}
df$lat <- sapply(df$url, find_lat)
df$lng <- sapply(df$url, find_lng)
# remove duplicates
df <- df[!duplicated(df[, c("lng", "lat")]),]
# turn into sf object
points <- st_as_sf(df, coords = c("lng", "lat"), crs = 4326)
# remove points not in aarhus kommune
kommune <- read_sf("../data/multipolygons/municipality_border/kommune_border.shp")
outsiders <- st_difference(points, kommune)
insiders <- st_intersection(points, kommune)
# Look at the map
leaflet() %>%
addTiles() %>%
addMarkers(data=outsiders$geometry, popup = "outside") %>%
addPolygons(data = kommune, color = "black", weight = 2, fill = FALSE)
leaflet() %>%
addTiles() %>%
addMarkers(data = insiders$geometry) %>%
addPolygons(data = kommune, color = "black", weight = 2, fill = FALSE)
walking_isos <- mb_isochrone(
insiders,
profile = "walking",
time = 15,
id = "url"
)
write_sf(walking_isos, "../data/isochrones/supermarkets_isos.shp")
super_isos <- read_sf("../data/isochrones/supermarkets_isos.shp")
multipolygon <- st_union(super_isos$geometry)
write_sf(multipolygon, "../data/multipolygons/supermarkets/market.shp")
polygons <- read_sf("../data/multipolygons/supermarkets/market.shp")
byzone <- read_sf("../data/multipolygons/city_zone/byzone_aarhus.shp")
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11",
username = "mapbox") %>%
addPolygons(data = polygons,
color = c("blue"),
fillColor = c("blue"),
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2) %>%
addPolygons(data = byzone,
color = c("red"),
fillColor = c("red"),
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2)
